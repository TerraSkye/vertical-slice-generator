package template

import (
	"context"
	. "github.com/dave/jennifer/jen"
	"github.com/terraskye/vertical-slice-generator/eventmodel"
	"github.com/terraskye/vertical-slice-generator/generator/write_strategy"
)

type stateChangeTemplate struct {
	info *GenerationInfo
}

func NewStateChangeTemplate(info *GenerationInfo) Template {
	return &stateChangeTemplate{
		info: info,
	}
}

// Renders stub code for service, its methods and constructor, that implements service interface.
//
//	// Generated by "microgen" tool.
//	// Structure stringService implements StringService interface.
//	type stringService struct {
//	}
//
//	func NewStringService() StringService {
//		panic("constructor not provided")
//	}
//
//	func (s *stringService) Count(ctx context.Context, text string, symbol string) (count int, positions []int) {
//		panic("method not provided")
//	}
func (t *stateChangeTemplate) Render(ctx context.Context) write_strategy.Renderer {

	commandPackage, err := ResolvePackagePath(t.info.OutputFilePath + "/domain/commands")
	if err != nil {
		panic(err)
	}

	eventsPackage, err := ResolvePackagePath(t.info.OutputFilePath + "/events")
	if err != nil {
		panic(err)
	}

	z := NewFile("domain")
	z.ImportAlias(PackageEventSourcing, "cqrs")
	z.ImportAlias(commandPackage, "")
	z.ImportAlias(eventsPackage, "")

	return z

}

func (t *stateChangeTemplate) DefaultPath() string {
	return "/" + eventmodel.SliceTitle(t.info.Slice.Title) + "/service.go"
}

func (t *stateChangeTemplate) Prepare(ctx context.Context) error {
	return nil
}

func (t *stateChangeTemplate) ChooseStrategy(ctx context.Context) (write_strategy.Strategy, error) {
	return write_strategy.NewCreateFileStrategy(t.info.OutputFilePath, t.DefaultPath()), nil

}
